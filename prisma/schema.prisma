generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CaloriesBurned {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime @default(now())
  calories  Int // Потраченные калории
  notes     String? // Опциональные заметки
  createdAt DateTime @default(now())

  @@unique([userId, date]) // ✅ Добавлено
}

model User {
  id             String           @id @default(uuid())
  telegramId     String           @unique
  createdAt      DateTime         @default(now())
  accessToken    String?          @unique
  refreshToken   String?          @unique
  name           String?
  isPremium      Boolean          @default(false) // Премиум-статус
  isAdmin        Boolean          @default(false)
  photoUrl       String?
  goal           Int?             @default(2212) // Цель калорий
  courses        Course[]
  reminders      Reminder[]
  foodAnalyses   FoodAnalysis[]
  supplements    Supplement[]
  progress       Progress[]
  surveys        Survey[]
  lastMessage    String?
  GoalAnalytics  GoalAnalytics[]
  qrCodes        QRCode[] // Связь с QR-кодами
  CaloriesBurned CaloriesBurned[]
}

model QRCode {
  id        String    @id @default(uuid())
  code      String    @unique // Уникальный ID для QR-кода
  userId    String? // Связь с пользователем, если QR-код использован
  user      User?     @relation(fields: [userId], references: [id])
  isUsed    Boolean   @default(false) // Использован ли QR-код
  createdAt DateTime  @default(now())
  expiresAt DateTime? // Срок действия QR-кода (опционально)
  orderId   String? // Добавляем поле orderId
}

model FoodAnalysis {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  photoUrl    String?
  dish        String?
  calories    Int
  nutrients   Json
  suggestions String
  questions   Json?
  warnings    String?
  type        String? // Breakfast, Lunch, Snack, Dinner
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
}

model Course {
  id             String     @id @default(uuid())
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  goal           String
  supplements    Json
  duration       Int?
  suggestions    String?
  warnings       String?
  questions      Json?
  repeatAnalysis String?
  disclaimer     String? // Новое поле
  schedule       Json
  isPremium      Boolean    @default(false)
  reminders      Reminder[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
  progress       Progress[]
  surveys        Survey[]
}

model Reminder {
  id             String    @id @default(uuid())
  courseId       String
  course         Course    @relation(fields: [courseId], references: [id])
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  type           String? // SUPPLEMENT, ANALYSIS, SURVEY
  status         String? // TAKEN, SKIPPED, COMPLETED
  surveyResponse String? // good, normal, bad
  time           String
  message        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

model Supplement {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String?
  photoUrl  String?
  createdAt DateTime @default(now())
}

model GoalAnalytics {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  goal      String
  createdAt DateTime @default(now())
}

model Progress {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  courseId   String
  course     Course    @relation(fields: [courseId], references: [id])
  supplement String
  date       DateTime
  status     String    @default("PENDING") // PENDING, TAKEN, SKIPPED
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([userId, courseId, supplement, date])
  @@index([userId, courseId])
}

model Survey {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  question  String
  response  String?
  status    String   @default("PENDING") // PENDING, COMPLETED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
